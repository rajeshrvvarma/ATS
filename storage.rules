rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Allow read for files under `public/` or for users who are enrolled in the course (enrollment check via Firestore)
    match /public/{allPaths=**} {
      allow read; // public assets
      allow write: if request.auth != null && request.auth.token.admin == true;
    }

    // Recordings stored under recordings/batches/{batchId}/... are managed by server-side signed uploads.
    // Client-side writes are denied; server uploads should use signed v4 PUT URLs. Reads are allowed
    // when a recording is explicitly public or when the requesting user is enrolled in the batch.
    match /recordings/batches/{batchId}/{allPaths=**} {
      // Deny client-side writes by default. Signed URLs from the server bypass these rules.
      allow write: if false;

      // Allow read if the file has a metadata flag 'public' set to 'true' OR the requesting user is enrolled
      // in the matching batch. Enrollment docs follow the pattern `enrollments/{userId}_{batchId}`.
      allow read: if resource.metadata.public == 'true' || (
        request.auth != null &&
        exists(/databases/$(database)/documents/enrollments/$(request.auth.uid + '_' + batchId))
      );
    }

    // Thumbnail uploads and other admin-managed assets
    match /thumbnails/{allPaths=**} {
      allow write: if request.auth != null && request.auth.token.admin == true;
      allow read: if true;
    }

    // Fallback: deny all client writes
    match /{allPaths=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}
