rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Allow reading user notes for admin dashboard
      match /notes/{noteId} {
        allow read, write: if request.auth != null;
      }
    }

    // Course pricing - public read access, admin write
    match /course_pricing/{courseId} {
      allow read: if true;  // Allow public read access
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Courses - public read, admin/instructor write
    match /courses/{courseId} {
      allow read: if true;  // Public can browse courses
      allow write: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'instructor');
    }

    // Lessons - authenticated users can read, admin/instructor can write
    match /lessons/{lessonId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'instructor');
    }

    // Orders collection (payment data)
    match /orders/{orderId} {
      allow read, write: if request.auth != null;
    }

    // Webhooks collection (payment callbacks)
    match /webhooks_phonepe/{webhookId} {
      allow read, write: if request.auth != null;
    }

    // Analytics events - users can create, admins can read all
    match /analyticsEvents/{eventId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.userId ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Quizzes - public read, admin write
    match /quizzes/{quizId} {
      allow read: if true;  // Public can view quizzes
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Quiz attempts - users can read/write their own
    match /quiz_attempts/{attemptId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == resource.data.userId;
    }

    // Quiz results - users can read/write their own
    match /quizResults/{resultId} {
      allow read, write: if request.auth != null;
    }

    // User progress - users can manage their own progress
    match /progress/{progressId} {
      allow read, write: if request.auth != null;
    }

    // Forum discussions - authenticated users can read/write
    match /forum_discussions/{discussionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;

      match /replies/{replyId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null;
      }
    }

    // Student enrollments - users can read/write their own
    match /enrollments/{enrollmentId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == resource.data.studentId;
    }

    // Gamification data - users can read/write their own
    match /gamification/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Events (batches, bootcamps, workshops) - public read, admin write
    match /events/{eventId} {
      allow read: if true;  // Public can view events for banner and events page
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admin can access everything (catch-all for any other collections)
    match /{document=**} {
      allow read, write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}