rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection: users can read their own data; role/status changes restricted
    match /users/{userId} {
      // Read: authenticated users can read user documents (for admin dashboards this is acceptable)
      allow read: if request.auth != null;

      // Update role/status: only admins can modify other users' role/status fields
      allow update: if request.auth != null && (
        // Admins can update any user's role/status
        isAdmin() ||
        // Or users can update other personal fields on their own profile, but not role/status
        (request.auth.uid == userId && !('role' in request.resource.data) && !('status' in request.resource.data))
      );

      // Create: only server or admin should create user records (keep conservative)
      allow create: if isAdmin() || isServer();

      // Delete: only admins can delete users
      allow delete: if isAdmin();

      // Notes subcollection: authenticated users can add notes, admins can read all
      match /notes/{noteId} {
        allow read: if isAdmin() || (request.auth != null && request.auth.uid == userId);
        allow create: if request.auth != null;
        allow update, delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
      }
    }

    // Also support older/alternate userProfiles collection used in some services
    match /userProfiles/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if isAdmin();
    }

    // Course pricing - public read access, admin write
    match /course_pricing/{courseId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Courses - public read, admin or instructor write
    match /courses/{courseId} {
      allow read: if true;
      allow create, update, delete: if isAdmin() || isInstructor();
    }

    // Lessons - authenticated users can read, admin/instructor can write
    match /lessons/{lessonId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin() || isInstructor();
    }

    // Batches - public read, admin write
    match /batches/{batchId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Session documents nested under batches
    match /batches/{batchId}/sessions/{sessionId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Orders collection (payment data)
    match /orders/{orderId} {
      allow read: if isAdmin() || isAuthenticated();
  // creation: allow admin or authenticated clients (students creating their own enrollment)
  allow create: if isAdmin() || isAuthenticated();
  allow update, delete: if isAdmin();
    }

    // Webhooks collection (payment callbacks) - prefer server-only writes
    match /webhooks_phonepe/{webhookId} {
      allow read: if isAdmin();
  allow create: if isAdmin();
  allow update, delete: if isAdmin();
    }

    // Analytics events - users can create, admins can read all
    match /analyticsEvents/{eventId} {
      allow create: if isAuthenticated();
      allow read: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.userId);
    }

    // Quizzes - public read, admin write
    match /quizzes/{quizId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Quiz attempts - users can read/write their own
    match /quiz_attempts/{attemptId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Quiz results - authenticated users only
    match /quizResults/{resultId} {
      allow read, write: if request.auth != null;
    }

    // User progress - users can manage their own progress
    match /progress/{progressId} {
      allow read, write: if request.auth != null;
    }

    // Forum discussions - authenticated users can read/write
    match /forum_discussions/{discussionId} {
      allow read, write: if request.auth != null;

      match /replies/{replyId} {
        allow read, write: if request.auth != null;
      }
    }

    // Student enrollments - allow read for admin or the student; creation allowed for server/admin or when student creates their own
    match /enrollments/{enrollmentId} {
      allow read: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.studentId);
      // allow admin by token claim OR admin lookup, server, or when the student creates their own
      allow create: if isAdmin() || isServer() || (request.auth != null && request.auth.token.admin == true) || (request.auth != null && request.auth.uid == request.resource.data.studentId);
      allow update, delete: if isAdmin();
    }

    // Gamification data - users can read/write their own
    match /gamification/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Events (batches, bootcamps, workshops) - public read, admin write
    match /events/{eventId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Admin logs - only admins can write/read logs
    match /adminLogs/{logId} {
      allow create: if isAdmin();
      allow read: if isAdmin();
      allow update, delete: if false; // immutable logs
    }

    // Default catch-all: only admins can access other collections
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // Helper functions
    function isAdmin() {
      // Check both 'users' and 'userProfiles' collections for backward compatibility
      return request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
        get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin'
      );
    }

    function isInstructor() {
      return request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'instructor' ||
        get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'instructor'
      );
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // Server writes should be performed with the Firebase Admin SDK from your server/functions.
    // Admin SDK calls bypass security rules, so you don't need `isServer()` checks when using Admin SDK.
    // If you must use client-authenticated server users, keep a tight scope and rotate credentials regularly.
    function isServer() {
      // Legacy placeholder kept for compatibility; prefer Admin SDK instead.
      return false;
    }
  }
}